STARTUP CODE

Options -> debugger -> uncheck run to main

select ti-stellaris as driver

Download -> use flashloader

General -> Target -> Device 
Note Floating Point Unit FPU VFPv4


program now starts with __iar_program_start not main

first instruction BL Branch with Link (function call) -> __iar_init_vfp --> initialises floating point
next instruction is function call to ?main

?main calls __low_level_init to initialise the hardware, stuff like increasing clock speed ...

if __low_level_init doesnt work __iar_data_init3 function is called to do the initialisation

PROGRAM SECTIONS INCLUDING DATA SECTION 
Could be seen in map file generated by the linker

Generate linker map file (Options -> linker -> list -> check generate linker map file)
found in output folder

MAP FILE: 

Module summary: contains memory usage: code space in ROM and data space in ROM and RAM

Placement Summary: Lists all the program sections (.intvec, .text, .bss, .rodata, .data)

initialised data is added to .data section: data is copied from rom to ram during startup

C-standard requires all initialised values to have their values and all uninitialised set to 0 before main is called
.bss should be cleared

HOW SP got its initial value and 
HOW PC ended up at __iar_program_start

The arm cortex processor is hardwired such that after reset, it copies the bits from address 0x0 to the SP register
all the bits except the LSB to the PC, the LSB must be 1, indicates the thumb mode of the processor

Address 0x0 contains the Vector table: 
Vector table (see datasheet) contains data such as 
 - reset value of SP and 
 - start address such as PC
also contains: 
 - Exceptions: include Bus-Fault, Debug-Monitor, Hard-Fault, Memory-Manager, Non-Maskable-Interrupt
 - Interrupts 
 
 GENERIC VECTOR TABLE SHOULD BE REPLACED WITH A REAL ONE THAT CAN HANDLE ALL INTERRUPTS IN THE MCU

